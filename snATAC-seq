snATAC-seq code

library(Seurat)
library(Signac)
library(tibble)
library(patchwork)
library(tidyr)
library(cowplot)
library(ggplot2)
library(sctransform)
# library(MAST)
library(viridis)
library(dplyr)
# library(pheatmap)
library(RColorBrewer)
library(DoubletFinder)
# library(harmony)
library(GenomeInfoDb)
# library(EnsDb.Mmusculus.v79)
library(stringr)
library(rtracklayer)
library(reshape2)
library(qgraph)

seed <- 24
set.seed(seed)

dataDir <- "/home/cshi/AdaptImmune/data/Combined_20220413/ATAC"
WD <- "/home/cshi/AdaptImmune/analysis/"
setwd(WD)

##############
## Read in and combine peaks
peaks.list <- list()
for (dir in list.dirs(dataDir, recursive = F)) {
  name <- gsub(paste0(dataDir, "/"), "", dir)
  peaks.list[[name]] <- read.table(paste0(dir, "/peaks.bed"), col.names = c("chr", "start", "end"))
  peaks.list[[name]] <- makeGRangesFromDataFrame(peaks.list[[name]])
}

combined.peaks <- reduce(c(peaks.list$Control, peaks.list$Exp))

## Filter out bad peaks based on length
peakwidths <- width(combined.peaks)
paste("Min.", min(peakwidths))
paste("Max.", max(peakwidths))
hist.data <- hist(peakwidths, breaks=100, plot=F)
hist.data$counts = log10(hist.data$counts+1)
options(repr.plot.width=4, repr.plot.height=4)
plot(hist.data, ylab='log10(Freq.+1)')
combined.peaks <- combined.peaks[peakwidths  < 10000 & peakwidths > 20]

##############
## Read in fragments and generate peak counts for filtered barcodes (from "outs/filtered_peak_bc_matrix/")
library(stringr)
barcode.list <- list()
frag.list <- list()
seu.list <- list()

## Load custom annotations
gtf <- rtracklayer::import('/home/cshi/reference/refdata-cellranger-arc-mm10-2020-A-2.0.0/genes/genes.gtf')
gene.coords <- gtf
seqlevelsStyle(gene.coords) <- 'UCSC'
gene.coords <- keepStandardChromosomes(gene.coords, pruning.mode = 'coarse')
annotations <- gene.coords
annotations$gene_biotype <- annotations$gene_type

for (dir in list.dirs(dataDir, recursive = F)) {
  # paste("Processing", dir)
  name <- gsub(paste0(dataDir, "/"), "", dir)
  barcode.list[[name]] <- read.delim(paste0(dir, "/barcodes.tsv"), header = F)[,1]
  frag.list[[name]] <- CreateFragmentObject(paste0(dir, "/fragments.tsv.gz"), cells = barcode.list[[name]])
  seu.list[[name]] <- FeatureMatrix(fragments = frag.list[[name]], features = combined.peaks, cells = barcode.list[[name]])
  seu.list[[name]] <- CreateChromatinAssay(seu.list[[name]] , fragments = frag.list[[name]], min.cells = 10, min.features = 200)
  seu.list[[name]] <- CreateSeuratObject(seu.list[[name]], assay = "ATAC", project = name, meta.data = read.csv(paste0(dir, "/singlecell.csv"), header = T, row.names = 1))
  Annotation(seu.list[[name]]) <- annotations
}

#############
## QC
for (name in names(seu.list)) {
  seu.list[[name]] <- NucleosomeSignal(object = seu.list[[name]])
  seu.list[[name]] <- TSSEnrichment(object = seu.list[[name]])
  seu.list[[name]]$pct_reads_in_peaks <- seu.list[[name]]$peak_region_fragments / seu.list[[name]]$passed_filters * 100
  seu.list[[name]]$blacklist_ratio <- seu.list[[name]]$blacklist_region_fragments / seu.list[[name]]$peak_region_fragments
}

## Visualise
options(repr.plot.width=20, repr.plot.height=5)
VlnPlot(
  object = seu.list$Control,
  features = c('pct_reads_in_peaks', 'peak_region_fragments',
               'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal'),
  pt.size = 0.1,
  ncol = 5
)
options(repr.plot.width=20, repr.plot.height=20)
plot_grid(plotlist = lapply(seu.list, function(x) VlnPlot(object = x, features = c('pct_reads_in_peaks', 'peak_region_fragments',
                                                                 'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal'),
  pt.size = 0.1,
  ncol = 5
)), labels = names(seu.list), ncol = 1, scale = 0.95)

## Filter
seu.list <- lapply(seu.list, function(x) subset(x, subset = peak_region_fragments > 2000 &
                                                  peak_region_fragments < 20000 &
                                                  pct_reads_in_peaks > 15 &
                                                  blacklist_ratio < 0.05 &
                                                  nucleosome_signal < 4 &
                                                  TSS.enrichment > 2))

#############
## merge
seu.int <- merge(seu.list$Control, y=seu.list$Exp, add.cell.ids = c("Control", "Exp"))

## Normalise, scale and UMAP
seu.int <- RunTFIDF(seu.int)
seu.int <- FindTopFeatures(seu.int, min.cutoff = 20)
seu.int <- RunSVD(seu.int)

seu.int <- RunUMAP(object = seu.int, reduction = 'lsi', dims = 2:30)
seu.int <- FindNeighbors(object = seu.int, reduction = 'lsi', dims = 2:30)
for (res in c(1.6, 1.4, 1.2, 1.0, 0.8, 0.5, 0.3)) {
  seu.int <- FindClusters(seu.int, verbose = FALSE, resolution = res, algorithm = 3)}

# ## Write out meta
# meta <- FetchData(seu.int, vars = c("UMAP_1", "UMAP_2", "seurat_clusters", "orig.ident", grep("_snn_", colnames(seu.int@meta.data), value = T)))
# write.csv(meta, "/home/cshi/AdaptImmune/data/Combined_20220413/Christina_ATAC_meta.csv")

## Plot
options(repr.plot.width=4, repr.plot.height=4)
DepthCor(seu.int) ## First component correlates strongly w/sequencing depth so not used downstream
options(repr.plot.width=20, repr.plot.height=10)
DimPlot(seu.int, group.by = c(grep("_res", colnames(seu.int@meta.data), value = T), "orig.ident"), label = T, ncol=4)

## Compute gene activity assay
seu.atac <- seu.int
DefaultAssay(seu.atac) <- 'ATAC'
seu.atac[["activity"]] <- CreateAssayObject(counts = GeneActivity(seu.atac, biotypes=NULL))
seu.atac <- NormalizeData(
    object = seu.atac,
    assay = 'activity',
    normalization.method = 'LogNormalize',
    scale.factor = median(seu.atac$nCount_activity)
)

###################
## DE by cluster
DefaultAssay(seu.atac) <- "activity"
cluster.resolutions <- grep("_snn_", colnames(seu.atac@meta.data), value = T)

# de.cluster.list <- list()
# for (res in rev(cluster.resolutions)) {
#   Idents(seu.atac) <- res
#   de.cluster.list[[res]] <- FindAllMarkers(seu.atac, verbose = FALSE, only.pos = T)#, logfc.threshold = 0.75)
# }

# openxlsx::write.xlsx(de.cluster.list, "/home/cshi/AdaptImmune/analysis/wishlist/annotateATAC/Christina_ATACdata_pos_RNAactivity_markers.xlsx")

## Load manual annotation results
annotated.labels <- read.table("/home/cshi/AdaptImmune/analysis/wishlist/annotateATAC/Christina_ATACdata_res0.5_anno_20221111.csv", sep=',', header= TRUE)
Idents(seu.atac) <- "ATAC_snn_res.0.5"
seu.atac <- RenameIdents(seu.atac, setNames(annotated.labels$NAME, annotated.labels$CLUSTER))
seu.atac$seurat_clusters <- Idents(seu.atac)

options(repr.plot.width=7, repr.plot.height=7)
DimPlot(seu.atac) + coord_fixed()
DimPlot(seu.atac, group.by = c("seurat_clusters"), label = T, repel = T, label.size = 4) + coord_fixed()


###################
## Count peaks with variable accessibility between control and exp, with peaks grouped into 4 main categories.


DefaultAssay(seu.atac) <- "ATAC"

## We used “annotatePeaks.pl” of Homer to annotate peaks.
peak_anno <- read.table("/home/cshi/AdaptImmune/analysis/wishlist/scATAC_Fig1/peaks.strandboth.anno", sep = "\t", header=TRUE)
peak_anno$Annotation_simple <- unlist(lapply(strsplit(peak_anno$Annotation, split=" "), function(x) x[[1]][[1]]))
peak_anno[peak_anno$Annotation_simple=="TTS", c("Annotation_simple")] <- "exon"
rownames(peak_anno) <- paste(peak_anno$Chr, paste(peak_anno$Start, peak_anno$End, sep="-"), sep="-")
head(seu.atac@meta.data)

seu.atac.GCB.Control <- subset(seu.atac, subset = seurat_clusters == c("GC B cells") & orig.ident == "Control")
seu.atac.GCB.Control
seu.atac.GCB.Control.mat <- as.matrix(GetAssayData(object = seu.atac.GCB.Control, slot = "counts"))
seu.atac.GCB.Control.pcr <- rowSums(seu.atac.GCB.Control.mat>0)/dim(seu.atac.GCB.Control.mat)[2]
# head(seu.atac.GCB.Control.pcr)

seu.atac.GCB.Exp <- subset(seu.atac, subset = seurat_clusters == c("GC B cells") & orig.ident == "Exp")
seu.atac.GCB.Exp
seu.atac.GCB.Exp.mat <- as.matrix(GetAssayData(object = seu.atac.GCB.Exp, slot = "counts"))
seu.atac.GCB.Exp.pcr <- rowSums(seu.atac.GCB.Exp.mat>0)/dim(seu.atac.GCB.Exp.mat)[2]
# head(seu.atac.GCB.Exp.pcr)

f1_res <- data.frame(Control=seu.atac.GCB.Control.pcr, Exp=seu.atac.GCB.Exp.pcr)
f1_res$Annotation_simple <- unlist(peak_anno[rownames(f1_res), "Annotation_simple", drop=F])
# f1_res[f1_res$Annotation_simple=="TTS", c("Annotation_simple")] = "exon"
f1_res$weight = 1
# head(f1_res)

options(repr.plot.width=4, repr.plot.height=3)
cutoff <- 0.01
FC_min <- 10
# colors <- c("Blue", "Red", "Green", "Orange")
f1_res$FC <- (f1_res$Control + 0.00001)/(f1_res$Exp + 0.00001)
# For GCB common
# f1_res$useful <- (f1_res$Control >= cutoff & f1_res$Exp >= cutoff)
# For GCB variable (either up or down)
f1_res$useful <- (f1_res$Control >= cutoff | f1_res$Exp >= cutoff) & (f1_res$FC >= FC_min) # (f1_res$FC <= 1/FC_min) #

data <- f1_res[(f1_res$useful), c("Annotation_simple", "weight")]
data <- data %>%
  group_by(Annotation_simple) %>%
  count() %>%
  ungroup() %>%
  mutate(per=`n`/sum(`n`)) %>%
  arrange(desc(Annotation_simple))
data$label <- scales::percent(data$per)
data[["label"]]
data
ggplot(data=data)+
  geom_bar(aes(x="", y=per, fill=Annotation_simple), stat="identity", width = 1)+
  coord_polar("y", start=0)+
  theme_void() +
  # geom_text(aes(x=1, y = cumsum(per) - per/2, label=label)) +
  # labs(fill= "GCB common")
  labs(fill= "GCB variable")

###################
## Find differentially-accessible peaks


p_val_adj_cutoff <- 0.05
p_val_cutoff <- 0.05
seu.atac.GCB <- subset(seu.atac, subset = seurat_clusters == c("GC B cells"))#c("GCB cells I", "GCB cells II"))
seu.atac.GCB.DEs <- FindMarkers(seu.atac.GCB, group.by = "orig.ident",
                                ident.1 = "Control", ident.2 = "Exp", #ident.1/ident.2
                                # ident.1 = "Exp", ident.2 = "Control",
                                test.use = 'LR',
                                # min.pct = 0,
                                # logfc.threshold = 0,
                                latent.vars = 'peak_region_fragments')
                                # logfc.threshold=0, min.pct=0, min.diff.pct=0,
                                # test.use = "MAST")
head(seu.atac.GCB.DEs)
DEgenes <- seu.atac.GCB.DEs
DEgenes <- DEgenes[DEgenes$p_val < p_val_cutoff, ]
# DEgenes <- DEgenes[DEgenes$p_val_adj < p_val_adj_cutoff, ]
DEgenes <- DEgenes[order(-DEgenes$avg_log2FC, DEgenes$p_val_adj),]
paste0(sum(DEgenes$avg_log2FC > 0), " peaks down-regulated, and ", sum(DEgenes$avg_log2FC < 0), " peaks up-regulated in exp. sample.")
DEgenes <- rownames(DEgenes)
length(DEgenes)

seu.atac.GCB <- ScaleData(seu.atac.GCB, scale.max=1, assay="ATAC", features = DEgenes)
seu.atac.GCB[["ATAC"]]@scale.data <- (seu.atac.GCB[["ATAC"]]@scale.data + 1)/2
options(repr.plot.width=6, repr.plot.height=4)
DoHeatmap(seu.atac.GCB, cells = Cells(seu.atac.GCB), features = DEgenes, assay="ATAC", slot="scale.data", label=FALSE)

###################
## Motif with differential accessibility between control and exp


# ## Draw all cells
# options(repr.plot.width=6, repr.plot.height=6)
# # DoHeatmap(seu.atac.4motif.standard, features = DEmotifs, assay="chromvar", slot="data", label=FALSE) #
# InvolvedCells_and_features <- subset(seu.atac.4motif.standard, features = DEmotifs)#, downsample=100)
# cell_order <- order(InvolvedCells_and_features$orig.ident)
# mat <- as.matrix(InvolvedCells_and_features@assays$chromvar@data)[, cell_order]
# rownames(mat) <- rownames(InvolvedCells_and_features)
# mat <- mat[DEmotifs, ]
# cell_sample <- InvolvedCells_and_features$orig.ident[cell_order]
# rownames(mat) <- motif.name[rownames(mat)]
# ha_summary_noname = HeatmapAnnotation(
#     #CellType = rep(celltypes, 2),
#     # Sample = unique(cell_sample), #rep(orig.idents, length(celltypes)),
#     Sample = InvolvedCells_and_features$orig.ident[cell_order],
#     col = list(Sample = c("C21" = "#1974D2", "E21" = "#FF344E", "Control" = "#1974D2", "Exp" = "#FF344E"),
#             CellType = c("GCB-Centrocytes" = "#F58025", "GCB-Centroblasts" = "#004074", "Plasma Cells" = "#7BAED5")),
#     annotation_name_side = "right", show_annotation_name=FALSE
# )
# h1 <- Heatmap(mat, name="chromvar",# column_title = "Ave. expr.", #column_title_rot = 90,
#     top_annotation = ha_summary_noname,
#     show_row_names=TRUE, show_column_names=FALSE, cluster_rows=FALSE, cluster_columns=FALSE)
#     # width = unit(1, "cm"))

## Draw average for each group
InvolvedCells_and_features <- subset(seu.atac.4motif.standard, features = DEmotifs, subset = seurat_clusters %in% c("GC B cells"))#c("GCB cells II"))#, downsample=100)
cell_order <- order(InvolvedCells_and_features$orig.ident)
mat <- as.matrix(InvolvedCells_and_features@assays$chromvar@data)[, cell_order]
rownames(mat) <- rownames(InvolvedCells_and_features)
mat <- mat[DEmotifs, ]
cell_sample <- InvolvedCells_and_features$orig.ident[cell_order]
control.ave <- rowMeans(mat[, cell_sample=="Control"])
exp.ave <- rowMeans(mat[, cell_sample=="Exp"])
mat_ave <- matrix(, nrow = nrow(mat), ncol = 0)
mat_ave <- cbind(mat_ave, exp.ave)
mat_ave <- cbind(mat_ave, control.ave)
matrix.id <- rownames(seu.atac.4motif.standard)
motif.name <- ConvertMotifID(seu.atac.4motif.standard, assay="ATAC", id=rownames(seu.atac.4motif.standard))
names(motif.name) <- matrix.id
names(matrix.id) <- motif.name
ha_summary_noname = HeatmapAnnotation(
    #CellType = rep(celltypes, 2),
    Sample = c("Exp", "Control"), #unique(cell_sample), #rep(orig.idents, length(celltypes)),
    col = list(Sample = c("C21" = "#1974D2", "E21" = "#FF344E", "Control" = "#1974D2", "Exp" = "#FF344E"),
            CellType = c("GCB-Centrocytes" = "#F58025", "GCB-Centroblasts" = "#004074", "Plasma Cells" = "#7BAED5")),
    annotation_name_side = "right", show_annotation_name=FALSE
)
options(repr.plot.width=8, repr.plot.height=6)
rownames(mat_ave) <- motif.name[rownames(mat_ave)]
#h1 +
Heatmap(mat_ave, name="chromvar",# column_title = "Ave. expr.", #column_title_rot = 90,
    top_annotation = ha_summary_noname,
    show_row_names=TRUE, show_column_names=FALSE, cluster_columns=FALSE, #cluster_rows=FALSE,
    width = unit(8, "cm"),
    row_dend_width = unit(4, "cm"))

###################
## Look into specific region (e.g. Ighv1-72)


celltypes_involved <- c("GC B cells") #c("MZ B cells", "Follicular B", "Activated B cells", "GC B cells")#c("GCB cells I", "GCB cells II", "B cells", "MZ B cells")
seu.atac.withRNA <- RenameAssays(object = seu.atac, activity = 'RNA')
seu.atac.4signac <- RenameAssays(object = seu.atac.withRNA, ATAC = 'peaks')
# DefaultAssay(seu.atac.4signac) <- "peaks"
# # DefaultAssay(seu.atac.4signac) <- "RNA"

region <- "chr12-115757884-115758561"
features <- "Ighv1-72"

seu.atac.4signac_2plot <- subset(seu.atac.4signac, subset = orig.ident == "Control") #seu.atac.4signac #

cov_plot <- CoveragePlot(
  object = seu.atac.4signac_2plot,
  region = region,
  group.by = "seurat_clusters",
  idents = celltypes_involved,
  annotation = FALSE,
  peaks = FALSE
)

gene_plot <- AnnotationPlot(
  object = seu.atac.4signac_2plot,
  region = region
)

peak_plot <- PeakPlot(
  object = seu.atac.4signac_2plot,
  region = region
)

link_plot <- LinkPlot(
  object = seu.atac.4signac_2plot,
  region = region
)

tile_plot <- TilePlot(
  object = seu.atac.4signac_2plot,
  region = region,
  group.by = "seurat_clusters",
  idents = celltypes_involved
)

expr_plot <- ExpressionPlot(
  object = seu.atac.4signac_2plot,
  features = features,
  group.by = "seurat_clusters",
  idents = celltypes_involved,
  assay = "RNA"
) #+ scale_x_continuous(breaks = c(0, 0.5, 1.0))

options(repr.plot.width=6, repr.plot.height=7)
CombineTracks(
  plotlist = list(cov_plot, tile_plot, peak_plot, gene_plot, link_plot),
  expression.plot = expr_plot,
  heights = c(6, 6, 1, 2, 3),
  # heights = c(3, 3, 1, 2, 3),
  widths = c(10, 1.5)
)
